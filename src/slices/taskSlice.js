import { createSlice } from "@reduxjs/toolkit";
import { v4 as uuidv4 } from 'uuid';

const initialState = {
  task: "",
  taskList: [],
  showPopup: false,
  editTaskId: null,
};

// Helper function to update localStorage with the current task list
const updateLocalStorage = (taskList) => {
  localStorage.setItem("taskList", JSON.stringify(taskList));
};

const tasksSlice = createSlice({
  name: "tasks",
  initialState,
  reducers: {
    // Set the current task input value
    setTask(state, action) {
      state.task = action.payload;
    },
    
    // Add a new task to the task list
    addTask(state) {
      const formattedTask = state.task.trim();
      if (formattedTask.length === 0) { // Check if task length is 0
        return;
      }
      else if (formattedTask.length >= 51) { // Check if task length is greater than or equal to 51
        return;
      }
      else {
        state.taskList.push({ id: uuidv4(), text: formattedTask, isChecked: false });
        state.task = ""; // Reset the task input
        updateLocalStorage(state.taskList); // Update localStorage
      }
    },

    // Delete a task from the task list
    deleteTask(state, action) {
      state.taskList = state.taskList.filter(task => task.id !== action.payload);
      updateLocalStorage(state.taskList); // Update localStorage
    },

    // Toggle the completion status of a task
    toggleTaskComplete(state, action) {
      const task = state.taskList.find(task => task.id === action.payload);
      if (task) {
        task.isChecked = !task.isChecked;
        updateLocalStorage(state.taskList); // Update localStorage
      }
    },

    // Set the task list from localStorage
    setTaskList(state, action) {
      state.taskList = action.payload;
    },

    // Show or hide the edit task modal
    setShowPopup(state, action) {
      state.showPopup = action.payload;
    },
    // Set the ID of the task to be edited
    setEditTaskId(state, action) {
      state.editTaskId = action.payload;
    },
    // Edit an existing task
    editTask(state, action) {
      const { id, text } = action.payload;
      const task = state.taskList.find(task => task.id === id);
      if (task) {
        task.text = text.trim();
        updateLocalStorage(state.taskList); // Update localStorage
      }
    },
  },
});

// Exporting the actions generated by createSlice
export const {
  setTask,
  addTask,
  deleteTask,
  toggleTaskComplete,
  setTaskList,
  setShowPopup,
  setEditTaskId,
  editTask,
} = tasksSlice.actions;

// Exporting the reducer to be used in the store
export default tasksSlice.reducer;
